- name: Create a EROS Image Processing AMI
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    region: us-west-2
    keypair: "jenkins-master" # pem file name
    instance_type: "{{ my_inst_type | default('c5d.xlarge') }}"
    ec2build: true
  tasks:
  - name: Add override host
    when: override_host is defined
    add_host:
      hostname: "{{ override_host }}"
      groups: ec2_server
    changed_when: false

#  https://docs.aws.amazon.com/AmazonECS/latest/developerguide/al2ami.html

  roles:
    - { role: 'ec2-espa-ips-ami', when: ec2build }

- name: Configure instance(s)
  hosts: ec2_server
  remote_user: ec2-user
  become: True
  gather_facts: True
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    efsmount: false

  roles:
    - { role: 'efs-mount', when: efsmount }
    - s3-fuse
    - jobtmp-mount
    - ephemeral
    - ec2-perf-metrics

    # Nginx serves as a proxy for the aster data because the code assumes the aster data is available via http.
  tasks:
    - name: upgrade all packages
      yum:
        state: latest
        name: '*'

    - name: Enable amazon-linux-extras nginx
      shell: "amazon-linux-extras enable nginx1.12"
      become: yes

    - name: Enable amazon-linux-ecs
      shell: "amazon-linux-extras enable ecs"
      become: yes

    - name: Install additional tools
      yum:
        state: present
        update_cache: yes
        name:
          - xfsprogs
          - parted
          - ecs-init
          - nginx
          - docker
          - aws-cli

    - name: Update root filesystem in nginx config
      lineinfile: dest=/etc/nginx/nginx.conf regexp="^[\s]+root"  line="        root         /s3/auxiliaries/aster;"

    - name: enable service docker and ensure it is started
      service:
        name: docker
        enabled: yes
        state: started

    - name: enable service nginx and ensure it is started
      service:
        name: nginx
        enabled: yes
        state: started

    - name: enable service ecs and ensure it is started
      service:
        name: ecs
        enabled: yes
        state: started

    - name: adding existing user ec2-user to group docker
      user:
        name: ec2-user
        groups: docker
        append: yes

- name: Start AMI build process
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-west-2
    proj_tag: LPIP
    ami_name: EROS-BATCH

  tasks:
    - debug: var=ec2_provision_result.instances[0]

    - name: Check if AMI with the same name exists
      ec2_ami_facts:
        filters:
          name: "{{ ami_name }}"
      register: myami

    - debug: var=myami

    - name: Deregister AMI if it exists
      ec2_ami:
        image_id: "{{ myami.images[0].image_id }}"
        state: absent
      when: myami.images | length and myami.images[0].state == 'available'

    - name : Create AMI
      ec2_ami:
        instance_id: "{{ ec2_provision_result.instances[0].id }}"
        wait: yes
        delete_snapshot: yes
        name: "{{ ami_name }}"
        region: us-west-2
        tags:
          Name: "{{ ami_name }}"
          Project: "{{ proj_tag }}"

    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        region: "{{ region }}"
        instance_ids: "{{ ec2_provision_result.instances[0].id }}"
