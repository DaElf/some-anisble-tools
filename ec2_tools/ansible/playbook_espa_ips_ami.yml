- name: Create a EROS Image Processing AMI
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    keypair: EROS-Batch-Processing # pem file name
    vol_size: 32
    jobtmp_size: 256
    jobtmp_iops: 2500
    security_group: sg-0c305038ba5d8d1fb
    name_tag: EROS-AMI-Builder
    proj_tag: l2pgsv2
    region: us-west-2
    instance_type: t2.xlarge
    ami: ami-a0cfeed8  # AWS Linux  1 - required for ECS/Batch
    subnet: subnet-044c596c6b1ad7906

#  https://docs.aws.amazon.com/AmazonECS/latest/developerguide/al2ami.html

  roles:
    - ec2-espa-ips-ami

- name: Configure worker
  hosts: ec2_server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/EROS-Batch-Processing.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no' #Have to include this or it fails unattended
  become: yes

  roles:
    - efs-mount
    - s3-fuse

    # Nginx serves as a proxy for the aster data because the code assumes the aster data is available via http.
  tasks:
    - name: upgrade all packages
      yum:
        state: latest
        name: '*'

    - name: Enable amazon-linux-extras nginx
      shell: "amazon-linux-extras enable nginx1.12"
      become: yes

    - name: Enable amazon-linux-ecs
      shell: "amazon-linux-extras enable ecs"
      become: yes

    - name: Install additional tools
      yum:
        state: present
        update_cache: yes
        name:
          - xfsprogs
          - parted
          - ecs-init
          - nginx
          - docker
          - aws-cli

    - name: Create partition 1 on /dev/xvdb
      parted:
        device: /dev/xvdb
        number: 1
        state: present

    - name: Create a xfs filesystem on /dev/xvdb1
      filesystem:
        fstype: xfs
        dev: /dev/xvdb1
        opts: "-L jobtmp"

    - name: Mount /jobtmp from /dev/xvdb1
      mount:
        path: "/jobtmp"
        src: LABEL=jobtmp
        fstype: xfs
        state: mounted

    - name: Set permissions to open on /jobtmp
      file:
        path: "/jobtmp"
        mode: 0777

    - name: Update root filesystem in nginx config
      lineinfile: dest=/etc/nginx/nginx.conf regexp="^[\s]+root"  line="        root         /s3/auxiliaries/aster;"

    - name: enable service docker and ensure it is started
      service:
        name: docker
        enabled: yes
        state: started

    - name: enable service nginx and ensure it is started
      service:
        name: nginx
        enabled: yes
        state: started

    - name: enable service ecs and ensure it is started
      service:
        name: ecs
        enabled: yes
        state: started

    - name: adding existing user ec2-user to group docker
      user:
        name: ec2-user
        groups: docker
        append: yes

- name: Start AMI build process
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-west-2
    proj_tag: l2pgsv2

  tasks:
    - debug: var=ec2_provision_result.instances[0]

    - name : Create AMI
      ec2_ami:
        instance_id: "{{ ec2_provision_result.instances[0].id }}"
        wait: yes
        delete_snapshot: yes
        name: EROS-IPS-AMI
        region: us-west-2
        tags:
          Name:  EROS-IPS-AMI
          Project: "{{ proj_tag }}"

    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        region: "{{ region }}"
        instance_ids: "{{ ec2_provision_result.instances[0].id }}"
